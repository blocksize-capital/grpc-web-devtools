// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExampleServiceClient is the client API for ExampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleServiceClient interface {
	ExampleOne(ctx context.Context, in *ExampleOneRequest, opts ...grpc.CallOption) (*ExampleOneResponse, error)
	ExampleTwo(ctx context.Context, in *ExampleTwoRequest, opts ...grpc.CallOption) (*ExampleTwoResponse, error)
	AlwaysError(ctx context.Context, in *ExampleOneRequest, opts ...grpc.CallOption) (*ExampleOneResponse, error)
	StreamingExample(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (ExampleService_StreamingExampleClient, error)
}

type exampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleServiceClient(cc grpc.ClientConnInterface) ExampleServiceClient {
	return &exampleServiceClient{cc}
}

func (c *exampleServiceClient) ExampleOne(ctx context.Context, in *ExampleOneRequest, opts ...grpc.CallOption) (*ExampleOneResponse, error) {
	out := new(ExampleOneResponse)
	err := c.cc.Invoke(ctx, "/s12.example.ExampleService/ExampleOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) ExampleTwo(ctx context.Context, in *ExampleTwoRequest, opts ...grpc.CallOption) (*ExampleTwoResponse, error) {
	out := new(ExampleTwoResponse)
	err := c.cc.Invoke(ctx, "/s12.example.ExampleService/ExampleTwo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) AlwaysError(ctx context.Context, in *ExampleOneRequest, opts ...grpc.CallOption) (*ExampleOneResponse, error) {
	out := new(ExampleOneResponse)
	err := c.cc.Invoke(ctx, "/s12.example.ExampleService/AlwaysError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) StreamingExample(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (ExampleService_StreamingExampleClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExampleService_ServiceDesc.Streams[0], "/s12.example.ExampleService/StreamingExample", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServiceStreamingExampleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExampleService_StreamingExampleClient interface {
	Recv() (*ServerTime, error)
	grpc.ClientStream
}

type exampleServiceStreamingExampleClient struct {
	grpc.ClientStream
}

func (x *exampleServiceStreamingExampleClient) Recv() (*ServerTime, error) {
	m := new(ServerTime)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleServiceServer is the server API for ExampleService service.
// All implementations must embed UnimplementedExampleServiceServer
// for forward compatibility
type ExampleServiceServer interface {
	ExampleOne(context.Context, *ExampleOneRequest) (*ExampleOneResponse, error)
	ExampleTwo(context.Context, *ExampleTwoRequest) (*ExampleTwoResponse, error)
	AlwaysError(context.Context, *ExampleOneRequest) (*ExampleOneResponse, error)
	StreamingExample(*StreamRequest, ExampleService_StreamingExampleServer) error
	mustEmbedUnimplementedExampleServiceServer()
}

// UnimplementedExampleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExampleServiceServer struct {
}

func (UnimplementedExampleServiceServer) ExampleOne(context.Context, *ExampleOneRequest) (*ExampleOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExampleOne not implemented")
}
func (UnimplementedExampleServiceServer) ExampleTwo(context.Context, *ExampleTwoRequest) (*ExampleTwoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExampleTwo not implemented")
}
func (UnimplementedExampleServiceServer) AlwaysError(context.Context, *ExampleOneRequest) (*ExampleOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlwaysError not implemented")
}
func (UnimplementedExampleServiceServer) StreamingExample(*StreamRequest, ExampleService_StreamingExampleServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingExample not implemented")
}
func (UnimplementedExampleServiceServer) mustEmbedUnimplementedExampleServiceServer() {}

// UnsafeExampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleServiceServer will
// result in compilation errors.
type UnsafeExampleServiceServer interface {
	mustEmbedUnimplementedExampleServiceServer()
}

func RegisterExampleServiceServer(s grpc.ServiceRegistrar, srv ExampleServiceServer) {
	s.RegisterService(&ExampleService_ServiceDesc, srv)
}

func _ExampleService_ExampleOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).ExampleOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s12.example.ExampleService/ExampleOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).ExampleOne(ctx, req.(*ExampleOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_ExampleTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).ExampleTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s12.example.ExampleService/ExampleTwo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).ExampleTwo(ctx, req.(*ExampleTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_AlwaysError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).AlwaysError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s12.example.ExampleService/AlwaysError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).AlwaysError(ctx, req.(*ExampleOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_StreamingExample_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServiceServer).StreamingExample(m, &exampleServiceStreamingExampleServer{stream})
}

type ExampleService_StreamingExampleServer interface {
	Send(*ServerTime) error
	grpc.ServerStream
}

type exampleServiceStreamingExampleServer struct {
	grpc.ServerStream
}

func (x *exampleServiceStreamingExampleServer) Send(m *ServerTime) error {
	return x.ServerStream.SendMsg(m)
}

// ExampleService_ServiceDesc is the grpc.ServiceDesc for ExampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "s12.example.ExampleService",
	HandlerType: (*ExampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExampleOne",
			Handler:    _ExampleService_ExampleOne_Handler,
		},
		{
			MethodName: "ExampleTwo",
			Handler:    _ExampleService_ExampleTwo_Handler,
		},
		{
			MethodName: "AlwaysError",
			Handler:    _ExampleService_AlwaysError_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingExample",
			Handler:       _ExampleService_StreamingExample_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example.proto",
}
